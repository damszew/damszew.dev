[env]
PORT = "8000"

[tasks.tailwindcss]
script = "npx tailwindcss-cli@latest build style/styles.css -c style/tailwind.config.js -o static/styles.css"

[tasks.tailwindcss_release]
script = [
    "NODE_ENV=production npx tailwindcss-cli@latest build style/styles.css --minify --purge -c style/tailwind.config.js -o static/tailwind.big.css",
    "rm --force static/styles.css",
    "npx clean-css-cli@latest static/tailwind.big.css -o static/styles.css",
    "rm static/tailwind.big.css",
]

[tasks.create_wasm]
description = "Build with wasm-pack"
extend = "wasm-pack-base"
args = ["build", "--target", "web", "--out-name", "package", "--dev"]

[tasks.create_wasm_release]
description = "Build with wasm-pack"
extend = "wasm-pack-base"
args = ["build", "--target", "web", "--out-name", "package", "--release"]

[tasks.build]
description = "Build, and create wasms"
dependencies = ["create_wasm", "tailwindcss"]

[tasks.build_release]
description = "Build, and create wasms, with the release flag"
dependencies = ["create_wasm_release", "tailwindcss_release"]

[tasks.watch]
description = "Build, create wasms, and watch/recompile files for changes"
dependencies = ["build", "create_wasm"]
watch = { ignore_pattern = "pkg/*" }

[tasks.serve]
description = "Start server"
install_crate = { crate_name = "microserver", binary = "microserver", test_arg = "-h" }
command = "microserver"
args = ["--port", "${PORT}"]

[tasks.deploy]
description = "Build wasm in release mode and together with index.html and static dir copy it to ${1}"
dependencies = ["clean", "build_release"]
script = [
    "rm -rf ${1}/",
    "mkdir -p ${1}",
    "cp -r index.html static/ ${1}",
    "rm pkg/.gitignore",
    "mv pkg/ ${1}",
]
